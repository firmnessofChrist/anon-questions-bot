import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.types import FSInputFile, CallbackQuery, InlineKeyboardButton, InputMediaPhoto, InputMediaAnimation, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from src.callbacks import AdminStats, AdminUpload, AdminMailing, AdminChannels, AdminRefs, AdminAdv

router = Router()

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
messages_file_path = os.path.join('data', 'received_messages.txt')
os.makedirs('data', exist_ok=True)  # —Å–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(os.path.dirname(messages_file_path), exist_ok=True)

# ‚úÖ –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /admin
@router.message(Command('admin'))
async def admin_panel(message: Message):
    admin_ids = {686138890, 1119884448}
    if message.from_user.id not in admin_ids:
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard_admin = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å
    keyboard_admin.row(
        InlineKeyboardButton(text='Statisticsüìä', callback_data=AdminStats().pack()),
        InlineKeyboardButton(text='Uploadüìù', callback_data=AdminUpload().pack())
    )
    keyboard_admin.row(
        InlineKeyboardButton(text='Mailingüì©', callback_data=AdminMailing().pack()),
        InlineKeyboardButton(text='Channelsüó£Ô∏è', callback_data=AdminChannels().pack())
    )
    keyboard_admin.row(
        InlineKeyboardButton(text='View Messagesüì©', callback_data='view_messages')
    )
    keyboard_admin.row(
        InlineKeyboardButton(text='Referralsüîó', callback_data=AdminRefs().pack()),
        InlineKeyboardButton(text='Advertisement Postüì¢', callback_data=AdminAdv().pack())
    )

    await message.answer("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard_admin.as_markup())

# ‚úÖ –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.text)  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
async def save_message(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = message.text
    if not text:
        await message.reply("‚ö†Ô∏è –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    try:
        with open(messages_file_path, 'a', encoding='utf-8') as file:
            file.write(f"[{datetime.now():%Y-%m-%d %H:%M:%S}] ID {message.from_user.id}: {text}\n")
        await message.reply("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")



